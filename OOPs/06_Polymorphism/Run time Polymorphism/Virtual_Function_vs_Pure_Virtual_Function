Difference Between Virtual Function and Pure Virtual Function:
Virtual Function:

Definition: A virtual function is a function that is defined in the base class but can be overridden by derived classes.
Necessity of Override: It is not necessary to override a virtual function in the derived class. If not overridden, the base class version of the function will be called.
Purpose: It provides the option for derived classes to provide their own implementation, but itâ€™s not mandatory.


Pure Virtual Function:

Definition: A pure virtual function is a function that is declared in the base class but does not have a body, and must be implemented by all derived classes.
Necessity of Override: It is mandatory for every derived class to provide an implementation of the pure virtual function. If a derived class does not implement the pure virtual function, the derived class itself becomes an abstract class, and objects of that class cannot be created.
Purpose: It defines a "contract" that all derived classes must follow, forcing them to implement the pure virtual function.

Use Case of Abstract class

abstract classes are very useful in object-oriented programming (OOP), especially in situations where you want to define a common interface that multiple derived classes can implement. They provide a way to design your system with generalization, flexibility, and extensibility in mind

Abstract classes allow you to define a common interface that all derived classes must implement. This ensures that certain methods or behaviors are available across different classes, regardless of the specific implementation.
For example, in a system that manages different types of employees, an abstract class Employee can define a common interface (e.g., calculateSalary()) that all employee types must implement.

Interface as a special kind of class that only contains abstract methods
an interface tells a class what to do, but the class decides how to do it.